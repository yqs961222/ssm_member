<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qfedu.mapper.BrandDetailMapper">
  <resultMap id="BaseResultMap" type="com.qfedu.domain.entity.BrandDetail">
    <id column="pro_id" jdbcType="INTEGER" property="proId" />
    <result column="pro_name" jdbcType="VARCHAR" property="proName" />
    <result column="old_price" jdbcType="DECIMAL" property="oldPrice" />
    <result column="new_price" jdbcType="DECIMAL" property="newPrice" />
    <result column="release_time" jdbcType="DATE" property="releaseTime" />
    <result column="examine" jdbcType="INTEGER" property="examine" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="brand_id" jdbcType="INTEGER" property="brandId" />
    <result column="attribute" jdbcType="VARCHAR" property="attribute" />
  </resultMap>
  <select id="selectByAttr" resultMap="BaseResultMap">
    select pro_id, pro_name, old_price, new_price, release_time, examine, status
    from brand_detail
    where attribute = #{attr}
  </select>

  <select id="selectBySearch" resultMap="BaseResultMap">
    select pro_id, pro_name, old_price, new_price, release_time, examine, status
    from brand_detail
    <trim prefix="where" prefixOverrides="or">
      status in (0, 1) and pro_id like concat('%', '${search}', '%') or pro_name like concat('%', '${search}', '%')
    </trim>
  </select>

  <resultMap id="collect" type="BrandDetail" extends="BaseResultMap">
    <collection property="brandList" ofType="com.qfedu.domain.entity.Brand" resultMap="com.qfedu.mapper.BrandDetailMapper.BaseResultMap"/>
  </resultMap>
    <select id="selectAllById" resultMap="collect">
      select bd.pro_id,bd.pro_name,bd.old_price,bd.new_price,bd.release_time,bd.examine,bd.status,b.country
      from brand_detail bd
      left join brand_manager b on bd.brand_id=b.id
      where bd.brand_id=#{id} and bd.examine=1
      limit #{page},#{size}
    </select>

  <insert id="insertProduct">
    insert into brand_detail(pro_id,pro_name,old_price,new_price,release_time,examine,status,brand_id,attribute)
    values (pro_id=#{brandDetail.proId},pro_name=#{brandDetail.proName},old_price=#{brandDetail.oldPrice},
    new_price=#{brandDetail.newPrice},release_time=#{brandDetail.releaseTime},examine=#{brandDetail.examine},status=#{brandDetail.status},
    attribute=#{brandDetail.attribute})
  </insert>

  <delete id="deleteBath">
    delete from brand_detail
    where pro_id in
    <foreach collection="pid" separator="," open="(" close=")" item="pro_id">
      #{pro_id}
    </foreach>
  </delete>

  <delete id="deleteById">
    delete from brand_detail
    where pro_id=#{proId}
  </delete>

  <update id="updateBrand">
    update brand_detail
    <trim prefix="set" suffixOverrides=",">
      <if test="brandDetail.oldPrice != null and brandDetail.oldPrice != ''">
        old_price=#{brandDetail.oldPrice},
      </if>
      <if test="brandDetail.newPrice != null and brandDetail.newPrice != ''">
        new_price=#{brandDetail.newPrice},
      </if>
      <if test="brandDetail.releaseTime != null and brandDetail.releaseTime != ''">
        release_time=#{brandDetail.releaseTime},
      </if>
      <if test="brandDetail.examine != null and  brandDetail.examine != '' or brandDetail.examine == 0">
        examine=#{brandDetail.examine},
      </if>
      <if test="brandDetail.status != null and brandDetail.status != '' or brandDetail.status == 0">
        status=#{brandDetail.status},
      </if>
    </trim>
    where pro_id=#{brandDetail.proId}
  </update>

  <update id="updateBannedById">
    update brand_detail
    set status=#{status}
    where pro_id=#{pid}
  </update>
  <select id="selectById" resultMap="BaseResultMap">
    select * from brand_detail
    where pro_id=#{proId}
  </select>

  <select id="selectForAttr" resultType="java.lang.String">
    select distinct attribute
    from brand_detail
  </select>

</mapper>